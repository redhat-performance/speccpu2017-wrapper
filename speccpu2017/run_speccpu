#!/bin/bash

#
#                         License
#
# Copyright (C) 2022  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#
# This script provides an automated means of running the speccpu kit, it is the 
# end users responsibility to have a copy of the speccpu2017 kit.
#
version=""
test_name=speccpu2017
arguments="$@"
run_status="Ran"
gen_args_back="$@"
disks_found=0
installed=0
speccpu_run_dir=""
speccpu_run="/speccpu_run"
speccpu_iso_mnt="/speccpu"
speccpu_iso_file=""
uploads=""
give_usage=0
use_fs=""
run_loc_selected=0
data_disk_fs="xfs"

disk_options=""
provide_disks()
{
	echo You need to designate disks, following are currently not mounted.
	tools_bin/grab_disks grab_disks
	cat disks
	echo "Enter comma separated list of devices to use: "
	read devices_to_use
	device_list=`echo $devices_to_use | sed "s/,/,\/dev\//g"`
	device_list=/dev/${device_list}
	disk_options="--disks ${device_list}"
}

exit_out()
{
	#
	# cd to make sure we are not in one of the speccpu directories
	#
	cd
	if [ $installed -eq 0 ]; then
		umount ${speccpu_iso_mnt}
		umount ${speccpu_run}
	fi
	echo $1
	exit $2
}

i=1
j=$#

while [ $i -le $j ]
do
        #
        # Ansible causing problems again, getting passed }} for some reason from random workloads, filter it out.
        #
        case "$1" in
		--disks)
			disks_found=1
		;;
		--speccpu_run_dir)
			disks_found=1
		;;
		--installed)
			disks_found=1
		;;
		--no_disk)
			disks_found=1
		;;
		--usage)
			give_usage=1
		;;
		--)
			break
		;;
		*)
		;;
	esac
	i=$((i + 1))
	shift 1
done

usage()
{
	echo "Usage:"
	echo "  --copies x: number of copies of speccpu2017 to run.  Default is nprocs"
	echo "  --disk <disk path>:  Disk to use for speccpu2017 run area"
	echo "  --disk_fs <fs>: Filesystem to format --disk to (default xfs)"
	echo "  --installed: Already installed kit"
	echo "  --spec_config <config file.: spec config file to use, default is what is in"
	echo "    speccpu2017 kit."
	echo "  --speccpu_iso_file <path>e: speccpu2017 iso file to use"
	echo "  --speccpu_iso_mnt <mount point>: iso mount point.  Default is /speccpu.  If mounted, will not"
	echo "    attempt to remount."
	echo "  --speccpu_run <path>: mount point of device to run speccpu from"
	echo "  --speccpu_run_dir <dir>: If provided where the kit is installed at"
	echo "  --test <list>: A comma separated list.  You may specify intrate, fprate, or any subtest (ie 500.perlbench_r)."
	echo "  --uploads <path>: location to find the iso file in".
	echo "  --no_disk: use the filesystem with the most free space to install speccpu on."
	source ${curdir}/test_tools/general_setup --usage
}

if [ $give_usage -eq 1 ]; then 
	set -- ${gen_args_back}
	usage $0
fi

if [ $disks_found -eq 0 ]; then
        provide_disks
fi

set -- ${gen_args_back}

if [ ! -f "/tmp/${test_name}".out ]; then
	command="${0} $@ $disk_options"
	echo $command
	$command &> /tmp/${test_name}.out
	exit 0
fi

setup_done=0
run_user="none"
out_file=""
copies=""
tests="fprate,intrate"
test_prefix="none"
tools_git="https://github.com/redhat-performance/test_tools-wrappers"
disk_to_use=""
spec_config=""

curdir=`pwd`
if [[ $0 == "./"* ]]; then
	chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
	if [[ $chars == 1 ]]; then
		run_dir=`pwd`
	else
		run_dir=`echo $0 | cut -d'/' -f 1-${chars} | cut -d'.' -f2-`
		run_dir="${curdir}${run_dir}"
	fi
elif [[ $0 != "/"* ]]; then
	dir=`echo $0 | rev | cut -d'/' -f2- | rev`
	run_dir="${curdir}/${dir}"
else
	chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
	run_dir=`echo $0 | cut -d'/' -f 1-${chars}`
	if [[ $run_dir != "/"* ]]; then
		run_dir=${curdir}/${run_dir}
	fi
fi

generate_results_csv()
{
	mkdir work_around 2> /dev/null
	for file in `ls *txt`; do
		out_file=`echo $file | cut -d'.' -f1-4`.results.csv
		start_data=0
		#
		# For some reason we read the wrong file if we try addressing
		# it via file, or in the current directory.  Work around it, should
		# not be happening.
		#
		cp $file work_around/data
		cd work_around
		$TOOLS_BIN/test_header_info --front_matter --results_file "../$out_file" --host $to_configuration --sys_type $to_sys_type --tuned $to_tuned_setting --results_version $version --test_name $test_name
		echo "Benchmarks:Base copies:Base Run Time:Base Rate" >> ../$out_file
		while IFS= read -r line
		do
			if [ $start_data -eq 0 ]; then
				if [[ $line == "=="* ]]; then
					start_data=1
				fi
				continue
			fi
			if [[ $line == *"Est."* ]]; then
				break
			fi
			value=`echo $line | cut -d' ' -f1-4`
			checking=`echo $value | cut -d' ' -f 2`
			if [[ $checking == "NR" ]]; then
				run_status="Failed NR found in the results"
				local_test_name=`echo $value | cut -d' ' -f 1`
				output="${local_test_name}:::NR"
			else
				output=`echo $value | sed "s/ /:/g"`
			fi
			echo $output >> ../$out_file
		done < "data"
		grep -qi error ../$out_file
		if [ $? -eq 0 ]; then
			run_status="Failed: error detected"
		fi
		cd ..
	done
	rm -rf work_around
}

found=0
show_usage=0
for arg in "$@"; do
	if [ $found -eq 1 ]; then
		tools_git=$arg
		break;
	fi
	if [[ $arg == "--tools_git" ]]; then
		found=1
	fi

	#
	# We do the usage check here, as we do not want to be calling
	# the common parsers then checking for usage here.  Doing so will
	# result in the script exiting with out giving the test options. 
	#
	if [[ $arg == "--usage" ]]; then
		showusage=1
	fi
done

#
# Check to see if the test tools directory exists.  If it does, we do not need to
# clone the repo.
#
if [ ! -d "test_tools" ]; then
	git clone $tools_git ${curdir}/test_tools
	if [ $? -ne 0 ]; then
		exit_out "Error: pulling git $tools_git failed." 1
	fi
fi

if [ $show_usage -eq 1 ]; then
	usage $0
fi

# Variables set by general setup.
#
# TOOLS_BIN: points to the tool directory
# to_home_root: home directory
# to_configuration: configuration information
# to_times_to_run: number of times to run the test
# to_run_label: Label for the run
# to_user: User on the test system running the test
# to_sys_type: for results info, basically aws, azure or local
# to_sysname: name of the system
# to_tuned_setting: tuned setting
#

source ${curdir}/test_tools/general_setup "$@"

# Define options
#
ARGUMENT_LIST=(
	"copies"
	"disks"
	"run_user"
	"spec_config"
	"speccpu_iso_file"
	"speccpu_iso_mnt"
	"speccpu_run"
	"speccpu_run_dir"
	"test"
	"test_prefix"
	"uploads"
	"disk_fs"
)

NO_ARGUMENTS=(
	"installed"
	"no_disk"
	"usage"
)

# read arguments
opts=$(getopt \
    --longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
    --longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
    --name "$(basename "$0")" \
    --options "h" \
    -- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
        case "$1" in
		--copies)
			copies=${2}
			shift 2
		;;
		--disks)
			if [ $run_loc_selected -ne 0 ]; then
				exit_out "Error: --disks run location already designated, cannot designate multiple"
			fi
			run_loc_selected=1
			disk_to_use=${2}
			shift 2
		;;
		--disk_fs)
			data_disk_fs=$2
			shift 2
		;;
		--installed)
			installed=1
			shift 1
		;;
		--spec_config)
			spec_config=${2}
			shift 2
		;;
		--speccpu_iso_file)
			speccpu_iso_file=${2}
			shift 2
		;;
		--speccpu_iso_mnt)
			speccpu_iso_mnt=${2}
			shift 2
		;;
		--speccpu_run)
			speccpu_run=${2}
			shift 2
		;;
		--speccpu_run_dir)
			if [ $run_loc_selected -ne 0 ]; then
				exit_out "Error: --speccpu_run_dir run location already designated, cannot designate multiple"
			fi
			run_loc_selected=1
			speccpu_run=${2}
			speccpu_run_dir=${2}
			shift 2
		;;
		--no_disk)
			if [ $run_loc_selected -ne 0 ]; then
				exit_out "Error: --no_disk run location already designated, cannot designate multiple"
			fi
			run_loc_selected=1
			use_fs=`df --output=avail,target,source | grep -v Mounted | grep -v tmpfs | sort -n | tail -1 | xargs | sed "s/ /:/g" | cut -d: -f2`
			speccpu_run=$use_fs
			speccpu_run_dir=$use_fs
			shift 1
		;;

		--test)
			tests=${2}
			shift 2
		;;
		--test_prefix)
			test_prefix=${2}
			shift 2
		;;
		--tools_git)
			tools_git=$2
			shift 2
		;;
		--uploads)
			uploads=$2
			shift 2
		;;
		--usage)
			usage $0
		;;
		-h)
			usage $0
		;;
		--)
			break; 
		;;
		*)
			echo option not found $1
			usage $0
		;;
        esac
done

if [ $installed -eq 0 ] && [[ $disk_to_use != "grab_disks" ]] && [[ $speccpu_run_dir == "" ]]; then
	device_list=`echo $disk_to_use | sed "s/,/ /g"`
	for item in $device_list; do
		value=`file $item`
		echo $value | grep "block special" > /dev/null
		if [ $? -ne 0 ]; then
			exit_out "Error: $item is not a block device" 1
		fi
	done
fi

if [[ $spec_config == "" ]]; then
	model_name=`cat /proc/cpuinfo | grep "model name" | sort -u`
	if [[ $model_name == "*Intel"* ]] || [[ $model_name == "*AMD"* ]]; then
		spec_config="${speccpu_run}/config/Example-gcc-linux-x86.cfg"
	else
		spec_config="${speccpu_run}/config/Example-gcc-linux-aarch64.cfg"
	fi
fi

if [ -d /${to_home_root}/${to_user}/tools_bin ]; then
	tools_bin="/${to_home_root}/${to_user}/tools_bin"
else
	tools_bin="/${to_home_root}/tools_bin"
fi

if [[ ! -f "${speccpu_iso_mnt}/shrc" ]]; then
	mkdir ${speccpu_iso_mnt}
	if [[ $uploads == "" ]]; then
		uploads="/${to_home_root}/${to_user}/uploads"
	fi
	if [[ $speccpu_iso_file == "" ]]; then
		speccpu_iso_file="$uploads/cpu2017-1*.iso"
	fi
	echo mount  -t iso9660 $speccpu_iso_file ${speccpu_iso_mnt}
	mount  -t iso9660 $speccpu_iso_file ${speccpu_iso_mnt}
	if [ $? -ne 0 ]; then
		exit_out "Error: failed to mount $speccpu_iso_file ${speccpu_iso_mnt}" 1
	fi
fi
if [[ $speccpu_run_dir == "" ]]; then
	if [[ $disk_to_use == "" ]] || [[ $disk_to_use == "grab_disks" ]]; then
		$tools_bin/grab_disks grab_disks
		disk=`cat disks | cut -d' ' -f 1`
	else
		echo $disk_to_use
		disk=`echo $disk_to_use | cut -d',' -f 1 | cut -d'/' -f3-`
	fi
	wipefs -a /dev/${disk}
	mkfs.$data_disk_fs /dev/${disk}
	if [ $? -ne 0 ]; then
		exit_out "Error: Failed to make filesystem using /dev/${disk}" 1
	fi
	if [[ ! -d ${speccpu_run} ]]; then
		mkdir ${speccpu_run}
	fi
	echo mount /dev/${disk} ${speccpu_run}
	mount /dev/${disk} ${speccpu_run}
	if [ $? -ne 0 ]; then
		exit_out "Error: failed to mount /dev/${disk} on to ${speccpu_run}" 1
	fi
	rm -rf ${speccpu_run}
	mkdir ${speccpu_run}
else
	disk="none"
fi
echo ${speccpu_run} > /tmp/options
echo yes >> /tmp/options
cd ${speccpu_iso_mnt}
./install.sh < /tmp/options
if [ $? -ne 0 ]; then
	exit_out  "Error: install.sh failed." 1
fi
echo install complete
#
# Verify running at least 1.1.8
#
version=`cat ${speccpu_iso_mnt}/version.txt | sed "s/\.//g"`
if [[ $version -lt 118 ]]; then
	exit_out "Error, need version 1.1.8 or later" 1
fi
sed "s/%   define  gcc_dir        \"\/opt\/rh\/devtoolset-9\/root\/usr\"/%   define  gcc_dir \/usr/g" $spec_config > /tmp/foo
sed "s/tune                 = base,peak/tune                 = base/g" /tmp/foo > /tmp/foo1

#
# Handle compiler version
#
sed "s/%   define model        -mabi=lp64/%   define model        \"\"/g" /tmp/foo1 > /tmp/foo
gcc_version=`gcc --version|grep ^gcc|awk '{print $3}' | cut -d'.' -f 1`
spec_config="/tmp/default_spec.cfg"
if [[ $gcc_version -lt 10 ]]; then
	sed "s/   preENV_LD_LIBRARY_PATH/#   preENV_LD_LIBRARY_PATH/g" /tmp/foo >  $spec_config
else
	sed "s/#%define GCCge10  # EDIT: remove the/%define GCCge10  # EDIT: remove the/g" /tmp/foo > /tmp/foo1
	sed "s/   preENV_LD_LIBRARY_PATH/#   preENV_LD_LIBRARY_PATH/g" /tmp/foo1 > /tmp/foo2
	# Temporary compiler flag workaround for build error in cam4 with gcc14
	sed '/527.cam4_r,627.cam4_s:/!b;n; s/PORTABILITY   = -DSPEC_CASE_FLAG/PORTABILITY   = -DSPEC_CASE_FLAG -Wno-error=implicit-int/' /tmp/foo2 > /tmp/foo3
	LNNO=$(cat -n /tmp/foo3 | grep -A 20 '^ .*500.perlbench' | grep PORT | head -1 | awk '{print $1}')

	sed "${LNNO}s/\$/ -Wno-incompatible-pointer-types/" /tmp/foo3 > $spec_config

fi

cd ${speccpu_run}
source shrc
if [[ $copies == "" ]]; then
	copies=`nproc`
fi
tests_to_run=`echo $tests | sed "s/,/ /g"`
	
#
# Make sure clean build
#
bin/runcpu --action=clobber
#
# Now build each test.
#
for test_to_run in $tests_to_run
do
	bin/runcpu --config=${spec_config} --action=build $test_to_run
done

cpdir=""
if [[ $to_use_pcp -eq 1 ]]; then
	source $TOOLS_BIN/pcp/pcp_commands.inc
	setup_pcp
	pcp_cfg=$TOOLS_BIN/pcp/default.cfg
	pdir=/tmp/pcp_`date "+%Y.%m.%d-%H.%M.%S"`
	cpdir="--copy_dir $pdir"
	echo "Start PCP"
	start_pcp ${pdir}/ speccpu $pcp_cfg
fi

#
# Run speccpu, we have built the benchmark outside of pcp.
#
for test_to_run in $tests_to_run
do
	if [[ $to_use_pcp -eq 1 ]]; then
		start_pcp_subset
	fi
	runcpu --config=${spec_config} --copies=$copies $test_to_run
	if [[ $to_use_pcp -eq 1 ]]; then
		echo "Send result to PCP archive"
		out="${test_to_run}_pcp"
		result2pcp 1  ${out}
		stop_pcp_subset
	fi
done
if [[ $to_use_pcp -eq 1 ]]; then
	shutdown_pcp
fi

cd /tmp
RESULTSDIR=results_speccpu_${to_tuned_setting}_$(date "+%Y.%m.%d-%H.%M.%S")
mkdir -p ${RESULTSDIR}/result

pushd ${speccpu_run}/result
generate_results_csv
popd > /dev/null
cp -R ${speccpu_run}/result ${RESULTSDIR}
mv /tmp/${test_name}.out ${RESULTSDIR}
echo $run_status >> ${RESULTSDIR}/test_results_report
working_dir=`ls -rtd /tmp/results*${test_name}* | grep -v tar | tail -1`
tar hcf results_${test_name}_${to_tuned_setting}.tar  $RESULTSDIR
${curdir}/test_tools/save_results --curdir $curdir --home_root $to_home_root --tar_file /tmp/results_${test_name}_${to_tuned_setting}.tar --test_name $test_name --tuned_setting=$to_tuned_setting --version NONE --user $to_user $cpdir
#
# Remove speccpu temp files.
#
rm /tmp/default_spec.cfg.*
exit_out "Test completed" 0
